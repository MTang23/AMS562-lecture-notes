#include <algorithm>
#include <ctime>
#include <iostream>
#include <lapacke.h>
#include <random>
#include <vector>

int main() {
  // compute the LU decomposition with partial row pivoting
  // A = PLU
  // where L is the unit lower triangular matrix
  // U is the upper triangular matrix
  // and P is the permutation matrix
  std::vector<double> A(9);
  std::vector<int> pivot(3);

  // create a random matrix
  auto seed = std::time(0);
  std::mt19937 eng(seed);
  std::uniform_real_distribution<double> u(-1.0, 1.0);
  // for each element i in A, call i = generator()
  // in our case i = the value generated by the lambda,
  // which captures "u" and "eng"
  std::generate(A.begin(), A.end(), [&]() { return u(eng); });

  // a proper way to call lapack with error handling
  int info;
  info = LAPACKE_dgetrf(LAPACK_ROW_MAJOR, 3, 3, A.data(), 3, pivot.data());
  if (info != 0) {
    std::cerr << "dgetrf fails with error code: [" << info << "].\n";
    return 1;
  }

  // negative info means argument error!
  // for instance, if info == -1, then the first argument of dgetrf is invalid

  // positive info means computational error!
  // in this case, it can mean, for instance, the info's row become singular

  return 0;
}
